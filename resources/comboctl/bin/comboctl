#!/bin/bash
# Command utility for Dokuwiki

# flag
# e - Exit if any error (o = errexit)
# u - Treat unset variables as an error when substituting
# o pipefail - the return value of a pipeline is the status of the last command to exit with a non-zero status or zero if no command exited with a non-zero status
# E - (o = errtrace) the ERR trap is inherited by shell functions (ie automatically apply the trap to any subshells or functions that are executed within that script)
set -u -o pipefail -o errtrace -o errexit


##########################################
# Standard/Library function
##########################################
CLI_NAME=$(basename "$0") # Name of the cli


# Echo a message
function echo_log() {

  echo -e "$CLI_NAME: ${1:-}"

}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function finish() {
  echo_log
  echo_log "End of Script"
}
# executed when the shell exit normally or not
# https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html
trap 'echo_log ""; echo_log "End of Script";' EXIT


## A trap on ERR, if set, is executed before the shell exits.
# Because we show the $LINENO, we can;t create a function otherwise the line number would be not correct
trap 'echo_err ""; echo_err "Command error on line ($0:$LINENO)"; exit 1' ERR

######################################
# Variable Init and Mandatory
######################################
if [ -z "$DOKUWIKI_HOME" ]; then
  echo_err "The env (DOKUWIKI_HOME) is mandatory"
  exit 1
fi;
DOKUWIKI_SAVE_DIR="$DOKUWIKI_HOME/${DOKU_DOCKER_SAVE_DIR:-data}"
DOKUWIKI_PAGES_DIR="$DOKUWIKI_SAVE_DIR/pages"
DOKUWIKI_META_DIR="$DOKUWIKI_SAVE_DIR/meta"
DOKUWIKI_LOCKS_DIR="$DOKUWIKI_SAVE_DIR/locks"
DOKUWIKI_CACHE_DIR="$DOKUWIKI_SAVE_DIR/cache"
DOKUWIKI_MEDIA_DIR="$DOKUWIKI_SAVE_DIR/media"
DOKUWIKI_ATTIC_DIR="$DOKUWIKI_SAVE_DIR/attic"
DOKUWIKI_MEDIA_ATTIC_DIR="$DOKUWIKI_SAVE_DIR/media_attic"
DOKUWIKI_MEDIA_META_DIR="$DOKUWIKI_SAVE_DIR/media_meta"
DOKUWIKI_TMP_DIR="$DOKUWIKI_SAVE_DIR/tmp"

COMBO_SQLITE_RUNTIME="$DOKUWIKI_SAVE_DIR"/meta/combo-secondary.sqlite3
COMBO_SQLITE_PRIMARY="$DOKUWIKI_SAVE_DIR"/meta/combo.sqlite3

######################################
# Command
######################################
function update_index(){

    echo_log "Updating the index"

    # If the volume has not enough space, the data sub-directory
    # may have not been created, we create them to not break the search
    echo_log "  * Creating Dokuwiki directories if they does not exist"
    mkdir -p "$DOKUWIKI_ATTIC_DIR"
    mkdir -p "$DOKUWIKI_CACHE_DIR"
    mkdir -p "$DOKUWIKI_SAVE_DIR/index"
    mkdir -p "$DOKUWIKI_LOCKS_DIR"
    mkdir -p "$DOKUWIKI_SAVE_DIR/log"
    mkdir -p "$DOKUWIKI_MEDIA_META_DIR"
    mkdir -p "$DOKUWIKI_MEDIA_ATTIC_DIR"
    mkdir -p "$DOKUWIKI_META_DIR"
    mkdir -p "$DOKUWIKI_TMP_DIR"

    echo_log "  * Starting Indexing"
    # -q for quiet
    # -c for clear (but not yet implemented)
    if ! php "$DOKUWIKI_HOME"/bin/indexer.php -q; then
      echo_err "  * Indexing failed";
      # We failed because the website is not usable
      return 1;
    else
      echo_log "  * Indexing succeeded";
    fi

}

# The first parameter is the git URI
#
# for ssh:
#    install_site git@github.com:ComboStrap/site-com-combostrap.git
#
# for https
#    install_site https://github.com:ComboStrap/site-com-combostrap
#
install_site() {

    echo_log "Installing the site: $1"
    # The default globbing in bash does not include filenames starting with a . (ie hidden files)
    # We want to include the `.gitignore` to avoid including the whole dokuwiki software
    shopt -s dotglob
    # safe directory to resolve `fatal: detected dubious ownership in repository at '/var/www/html'`
    git config --global --add safe.directory "$DOKUWIKI_HOME"
    # Create a temp directory without any conflict
    TEMP_DIR=$(mktemp -d)
    echo_log "Cloning the site into: $TEMP_DIR"
    git clone "$1" "$TEMP_DIR"
    echo_log "Moving the site into: $DOKUWIKI_HOME"
    find "$TEMP_DIR" -type f | while read -r FILE_PATH; do
        FILE_RELATIVE_PATH=${FILE_PATH#$TEMP_DIR}
        FILE_RELATIVE_DIR=$(dirname "$FILE_RELATIVE_PATH")
        mkdir -p "$DOKUWIKI_HOME/$FILE_RELATIVE_DIR"
        mv -f "$FILE_PATH" "$DOKUWIKI_HOME/$FILE_RELATIVE_PATH"
    done
    echo_log "Cleaning up"
    rm -rf "$TEMP_DIR"

}

# Clean the meta directory
# This script will cleanup the meta directory
# History in this thread: https://forum.dokuwiki.org/d/10570-meta-folder-full-of-spam/10
function clean_meta(){


  case ${1} in
  page)
    resourceDir=${DOKUWIKI_PAGES_DIR}
    metaDir=${DOKUWIKI_META_DIR}
    ;;
  media)
    resourceDir=${DOKUWIKI_MEDIA_DIR}
    metaDir=${DOKUWIKI_MEDIA_META_DIR}
    ;;
  *)
    echo_err "The meta type parameter ($1) is unknown. It should be page or media"
    exit 1
    ;;
  esac

  echo_log "Meta        : Cleaning the $1 meta directory"
  # Iterate over each directory in meta
  find "$metaDir" -type d | while read -r dir; do
      # Get the relative path from metaDir
      relative_path="${dir#$metaDir}"

      # Check if the corresponding directory exists in resourceDir
      if [ ! -d "$resourceDir$relative_path" ]; then
          # If it doesn't exist, delete the directory in metaDir
          echo_log "  * Deleting dir: $dir"
          rm -rf "$dir"
      fi
  done

  # Iterate over each file in meta
  # A corresponding resource file (page or media) should exist
  # Files extension in meta may be `meta`, `indexed` or `changes`
  # In the find command line, `-o` means `or`
  echo_log "Meta        : Cleaning the $1 meta files"
  find "$metaDir" -type f \( -name "*.meta" -o -name "*.indexed" -o -name "*.changes" \) | while read -r metaFile; do

  	# Get the relative path from metaDir
    relative_path="${metaFile#$metaDir}"

    # Get away of the ext
  	relative_path_without_ext="${relative_path%.*}"

  	# Add the txt for a page cleanup
  	if [ "$1" == "page" ]; then
  	  relative_page_path="${relative_path_without_ext}.txt"
  	fi;

    # Check if the corresponding file (page or media) exists
    if [ ! -f "$resourceDir$relative_page_path" ]; then
        # If it doesn't exist, delete the file in meta
        echo_log "  * Deleting meta file: $metaFile"
        rm -f "$metaFile"
    fi

  done

}

# Clean function
# Adapted from: https://www.dokuwiki.org/tips:maintenance
cleanup(){

  DOKU_DOCKER_CLEAN_CACHE_RETENTION_DAYS=${DOKU_DOCKER_CLEAN_CACHE_RETENTION_DAYS:-10}
  echo_log "Cache       : Delete files that have not been accessed from $DOKU_DOCKER_CLEAN_CACHE_RETENTION_DAYS days"
  find "$DOKUWIKI_CACHE_DIR" -type f -atime +"${DOKU_DOCKER_CLEAN_CACHE_RETENTION_DAYS}" -delete

  echo_log "Locks       : Remove stale lock files older than 1 day"
  find "$DOKUWIKI_LOCKS_DIR" -name '*.lock' -type f -mtime +1 -delete

  echo_log "Tmp         : Remove files older than 1 day"
  find "$DOKUWIKI_SAVE_DIR"/tmp -type f -mtime +1 -delete

  DOKU_DOCKER_CLEAN_ATTIC_RETENTION_DAYS=${DOKU_DOCKER_CLEAN_ATTIC_RETENTION_DAYS:-360}
  echo_log "Attic Pages : Purge revisions pages older than ${DOKU_DOCKER_CLEAN_ATTIC_RETENTION_DAYS} days"
  find "$DOKUWIKI_MEDIA_ATTIC_DIR" -type f -mtime +"${DOKU_DOCKER_CLEAN_ATTIC_RETENTION_DAYS}" -delete
  DOKU_DOCKER_CLEAN_MEDIA_ATTIC_RETENTION_DAYS=${DOKU_DOCKER_CLEAN_MEDIA_ATTIC_RETENTION_DAYS:-90}
  echo_log "Attic Media : Purge media revisions older than ${DOKU_DOCKER_CLEAN_MEDIA_ATTIC_RETENTION_DAYS} days"
  find "$DOKUWIKI_ATTIC_DIR" -type f -mtime +"${DOKU_DOCKER_CLEAN_MEDIA_ATTIC_RETENTION_DAYS}" -delete

  echo_log "All         : Remove empty directories"
  find "$DOKUWIKI_SAVE_DIR"/{attic,cache,index,locks,media,media_attic,media_meta,meta,pages,tmp}/ \
        -mindepth 1 -type d -empty -delete


  COMBO_LOG_PREFIX="Combo Sqlite"
  # Primary Meta Table
  if [ -f "$COMBO_SQLITE_PRIMARY" ]; then
    TABLE_COUNT=$(sqlite3 "$COMBO_SQLITE_PRIMARY" "SELECT count(*) FROM sqlite_master WHERE type='table';")
    if [ "$TABLE_COUNT" != '0' ]; then
      # Old table
      echo "DELETE FROM REDIRECTIONS_LOG" | sqlite3 "$COMBO_SQLITE_PRIMARY"
    fi;
  fi;

  # Secondary Runtime Data
  if [ -f "$COMBO_SQLITE_RUNTIME" ]; then
    TABLE_COUNT=$(sqlite3 "$COMBO_SQLITE_RUNTIME" "SELECT count(*) FROM sqlite_master WHERE type='table';")
    if [ "$TABLE_COUNT" != '0' ]; then
      echo_log "$COMBO_LOG_PREFIX: Delete Cache Log Hit older than 5 days"
      echo "DELETE FROM CACHE_LOG WHERE datetime('now', '-5 days') > timestamp;" | sqlite3 "$COMBO_SQLITE_RUNTIME"
      echo_log "$COMBO_LOG_PREFIX: Delete Redirections Log Hit older than 1 day"
      echo "DELETE FROM REDIRECTIONS_LOG WHERE datetime('now', '-1 days') > timestamp;" | sqlite3 "$COMBO_SQLITE_RUNTIME"
    fi
  fi

  echo_log "$COMBO_LOG_PREFIX: Vacuum (Get space back, shrink the db file)"
  echo 'VACUUM;' | sqlite3 "$COMBO_SQLITE_RUNTIME"
  echo 'VACUUM;' | sqlite3 "$COMBO_SQLITE_PRIMARY"

  # Clean Meta
  clean_meta page
  clean_meta media

}


# Install Plugins
# if a plugins.dat file is found
install_plugins(){

    PLUGINS_FILE="${DOKU_DOCKER_SAVE_DIR}/combo/instance/plugins.dat"
    if [[ -f $PLUGINS_FILE ]]; then
      echo_log "Plugins Installation"
      grep -v '^#' "$PLUGINS_FILE" |
          while IFS=' ' read -r PLUGIN_NAME PLUGIN_ARCHIVE_URL
          do
            # If PLUGIN_NAME is empty, it's an empty line
            if [ -n "$PLUGIN_NAME" ]; then
              # Target Directory
              PLUGIN_TARGET_DIRECTORY="lib/plugins/$PLUGIN_NAME"
              if [[ ! -d $PLUGIN_TARGET_DIRECTORY ]]; then
                echo_log "  > Installing Plugin $PLUGIN_NAME ($PLUGIN_ARCHIVE_URL)"
                echo_log "    * Get the archive at ($PLUGIN_ARCHIVE_URL)"
                curl --fail -L "$PLUGIN_ARCHIVE_URL" -o "$PLUGIN_NAME.zip"
                echo_log "    * Create the directory"
                mkdir -p "$PLUGIN_TARGET_DIRECTORY"
                # > /dev/null -> no output
                echo_log "    * Unpack the archive"
                bsdtar --strip-components=1 -xvf "$PLUGIN_NAME.zip" -C "lib/plugins/$PLUGIN_NAME" > /dev/null 2>&1
                echo_log "    * Remove the archive"
                rm "$PLUGIN_NAME.zip"
              else
                echo_log "  > Plugin $PLUGIN_NAME already installed skipping"
              fi
            fi
          done
    else
        echo_log "No plugin files found, skipping installation"
    fi
}

# Example for a big wiki
# 53M     ./pages
# 285M    ./media
# 2.2G    ./meta
# 5.4M    ./media_meta
# 821M    ./attic
# 15M     ./index
# 1004K   ./locks
# 26M     ./media_attic
# 960K    ./tmp
# 33G     ./cache
# 1.5M    ./log
# 36G     .

function dokuwiki_usage(){

    echo_log "Databases Size:"

    if [ -f "$COMBO_SQLITE_PRIMARY" ]; then
      echo_log "  * Primary Database: $(du -sh  "$COMBO_SQLITE_PRIMARY")"
    else
      echo_log "  * No primary database found"
    fi

    if [ -f "$COMBO_SQLITE_RUNTIME" ]; then
      echo_log "  * Runtime Database: $(du -sh  "$COMBO_SQLITE_RUNTIME")"
    else
      echo_log "  * No runtime database found"
    fi

    echo_log
    echo_log "File System Size:"
    echo_log "Total DokuWiki Size: $(du -sh "$DOKUWIKI_HOME")"
    echo_log "Total Data Size: $(du -sh "$DOKU_DOCKER_SAVE_DIR")"
    echo_log "Total Data SubDirectories Sizes: "
    du -h --max-depth=1 "$DOKU_DOCKER_SAVE_DIR" | while IFS= read -r line; do
        echo_log "  * $line"
    done





    # Top 20 files
    # find "$DOKU_DOCKER_SAVE_DIR" -type f -exec du -h {} + | sort -rh | head -n 20
    # find . -type f -exec du -h {} + | sort -rh | head -n 20

}


function sync_metadata_to_database() {
    COMMAND="php ./bin/plugin.php combo metadata-to-database --host ${FQDN} --port 80 /"
    echo "$COMMAND"
    eval "$COMMAND"
}


function print_usage() {

  echo ""
  echo "Usage of the cli ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} command [argument ...] [--option[=value] ...]"
  echo ""
  echo "where command is one of:"
  echo "     * du                     - dokuwiki usage (ie dokuwiki disk usage)"
  echo "     * index                  - index the wiki"
  echo "     * install_site   GitUrl  - install a combo site"
  echo "     * install_plugins        - install the plugins of a combo site"
  echo "     * cleanup                - maintenance script to cleanup the wiki"
  echo "     * sync                   - sync pages meta to the database"
  echo "     * help                   - this help"
  echo ""

}

# Lock Monitoring (It seems)
function lock() {

  cd "$DOKUWIKI_LOCKS_DIR" || exit 1
  while :; do
    ls -A1
    sleep 0.1
    clear
  done

}

COMMAND=""
declare -a OPTIONS
# Parsing
for arg in "$@"; do
  case "$arg" in
  --*)
    OPTIONS+=("$arg")
    shift
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND=$1
        echo_log "Command ($COMMAND) found"
      else
        echo_log "Argument ($arg) found"
        ARGUMENTS+=("$arg")
    fi
    shift
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  echo_log 'No command was given, help chosen.'
  COMMAND='help'
fi

echo_log
echo_log "${CLI_NAME^} ${COMMAND^}"
echo_log "-------------------------------------------"
echo_log ""
case ${COMMAND} in
index)
  update_index
  ;;
install_site)
  install_site "${ARGUMENTS[@]}"
  ;;
install_plugins)
  install_plugins
  ;;
cleanup)
  cleanup
  ;;
du)
  dokuwiki_usage
  ;;
sync)
  sync_metadata_to_database
  ;;
help)
  print_usage
  ;;
*)
  echo_err "The command $COMMAND is unknown"
  print_usage
  exit 1
  ;;
esac
