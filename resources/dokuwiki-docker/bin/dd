#!/bin/bash

# The dokuwiki docker command cli and function
dd_echo(){
  echo "DokuWiki Docker: $1"
}

# The first parameter is the git URI
#
# for ssh:
#    dd_install_site git@github.com:ComboStrap/site-com-combostrap.git
#
# for https
#    dd_install_site https://github.com:ComboStrap/site-com-combostrap
#
dd_install_site() {

    dd_echo "Installing the site: $1"
    # The default globbing in bash does not include filenames starting with a . (ie hidden files)
    # We want to include the `.gitignore` to avoid including the whole dokuwiki software
    shopt -s dotglob
    # safe directory to resolve `fatal: detected dubious ownership in repository at '/var/www/html'`
    git config --global --add safe.directory "$PWD"
    # Create a temp directory without any conflict
    TEMP_DIR=$(mktemp -d)
    git clone "$1" "$TEMP_DIR"
    mv -f "$TEMP_DIR"/* .
    rm -rf "$TEMP_DIR"

}

# Install Plugins
# if a plugins.dat file is found
dd_install_plugins(){

    DOKU_DOCKER_SAVE_DIR=${DOKU_DOCKER_SAVE_DIR:-data}
    PLUGINS_FILE="${DOKU_DOCKER_SAVE_DIR}/combo/instance/plugins.dat"
    if [[ -f $PLUGINS_FILE ]]; then
      dd_echo "Plugins Installation"
      grep -v '^#' "$PLUGINS_FILE" |
          while IFS=' ' read -r PLUGIN_NAME PLUGIN_ARCHIVE_URL
          do
            # If PLUGIN_NAME is empty, it's an empty line
            if [ -n "$PLUGIN_NAME" ]; then
              # Target Directory
              PLUGIN_TARGET_DIRECTORY="lib/plugins/$PLUGIN_NAME"
              if [[ ! -d $PLUGIN_TARGET_DIRECTORY ]]; then
                dd_echo "  > Installing Plugin $PLUGIN_NAME ($PLUGIN_ARCHIVE_URL)"
                dd_echo "    * Get the archive at ($PLUGIN_ARCHIVE_URL)"
                curl --fail -L "$PLUGIN_ARCHIVE_URL" -o "$PLUGIN_NAME.zip"
                dd_echo "    * Create the directory"
                mkdir -p "$PLUGIN_TARGET_DIRECTORY"
                # > /dev/null -> no output
                dd_echo "    * Unpack the archive"
                bsdtar --strip-components=1 -xvf "$PLUGIN_NAME.zip" -C "lib/plugins/$PLUGIN_NAME" > /dev/null 2>&1
                dd_echo "    * Remove the archive"
                rm "$PLUGIN_NAME.zip"
              else
                dd_echo "  > Plugin $PLUGIN_NAME already installed skipping"
              fi
            fi
          done
    else
        dd_echo "No plugin files found, skipping installation"
    fi
}


################
# Install (users.auth.php, local.conf and acl.auth.php)
################
# The https://www.dokuwiki.org/installer but somewhat scripted
dd_install_configuration(){

  dd_echo "##############"
  # The policy of the [installer](https://www.dokuwiki.org/installer)
  DOKU_DOCKER_ACL_POLICY=${DOKU_DOCKER_ACL_POLICY:-readonly}
  dd_echo "Installation configuration with the ACL policy '$DOKU_DOCKER_ACL_POLICY'"

  ## Local.php should be first
  # as it's used by the script when creating the user file
  if [[ ! -f conf/local.php ]]; then
    dd_echo "conf/local.php: Dokuwiki Local conf not present copying a default one"
    cp "$DOKU_DOCKER_HOME"/meta/install/local.php ./conf/local.php
  else
    dd_echo "  * conf/local.php: Dokuwiki Local conf already present"
  fi

  case "$DOKU_DOCKER_ACL_POLICY" in
      # ReadOnly Wiki (read for everyone, write and upload for no one)
      "readonly")

          if [[ ! -f $DOKUWIKI_HOME/conf/acl.auth.php ]]; then
            dd_echo "  * conf/acl.auth.php: Read only ACL configured"
            cp "$DOKU_DOCKER_HOME"/meta/install/readonly/acl.auth.php ./conf/acl.auth.php
          else
            dd_echo "  * conf/acl.auth.php: Nothing Done - Dokuwiki Acl already present"
          fi

          if [[ ! -f $DOKUWIKI_HOME/conf/users.auth.php ]]; then
            cp -f "$DOKU_DOCKER_HOME"/meta/install/readonly/users.auth.php ./conf/users.auth.php
            dd_echo "  * conf/users.auth.php: Empty User dictionary copied"
          else
            dd_echo "  * conf/users.auth.php: Nothing Done - Already present"
          fi

        ;;
      # Public Wiki (read for everyone, write and upload for registered users)
      "public" | "pubupload" | "public-upload")

        if [[ ! -f $DOKUWIKI_HOME/conf/acl.auth.php ]]; then
            dd_echo "  * conf/acl.auth.php: Public ACL configured"
            cp "$DOKU_DOCKER_HOME"/meta/install/public/acl.auth.php ./conf/acl.auth.php
          else
            dd_echo "  * conf/acl.auth.php: Nothing done - already present"
        fi

        if [[ ! -f $DOKUWIKI_HOME/conf/users.auth.php ]]; then
            if [ -z "$DOKU_DOCKER_ADMIN_NAME" ]; then
              dd_echo "For an acl policy ($DOKU_DOCKER_ACL_POLICY), the admin name is mandatory. Set it with the environment variable (DOKU_DOCKER_ADMIN_NAME) "
              exit 1
            fi;
            if [ -z "$DOKU_DOCKER_ADMIN_PASSWORD" ]; then
              dd_echo "For an acl policy ($DOKU_DOCKER_ACL_POLICY), the admin password is mandatory. Set it with the environment variable ($DOKU_DOCKER_ADMIN_PASSWORD) "
              exit 1
            fi
            DOKU_DOCKER_ADMIN_EMAIL=${DOKU_DOCKER_ADMIN_EMAIL:-admin@localhost}
            dd_echo "  * conf/users.auth.php: Creating the user ($DOKU_DOCKER_ADMIN_NAME)"
            php "$DOKU_DOCKER_HOME"/bin/users.auth.init.php "$DOKU_DOCKER_ADMIN_NAME" "$DOKU_DOCKER_ADMIN_PASSWORD" "$DOKU_DOCKER_ADMIN_EMAIL"
          else
            dd_echo "  * conf/users.auth.php: Nothing done - already present"
        fi
      ;;
      *)
        dd_echo "The mode (ie DOKU_DOCKER_ACL_POLICY) should have the value 'readonly' or 'public' not ($DOKU_DOCKER_ACL_POLICY)"
        exit 1
      ;;
  esac
}

# Clean function
# Adapted from: https://www.dokuwiki.org/tips:maintenance
dd_clean(){

  # Delete file that have not been accessed from 10 days
  find "$DOKU_DOCKER_SAVE_DIR"/cache -type f -atime +10 -delete
  # Delete feed file
  find "$DOKU_DOCKER_SAVE_DIR"/cache -type f -name "*.feed" -delete
  # Remove stale lock files (files which are 1-2 days old)
  find "$DOKU_DOCKER_SAVE_DIR"/locks -name '*.lock' -type f -mtime +1 -delete

  # Purge files older than ${retention_days} days from attic and media_attic (old revisions)
  # Find "$DOKU_DOCKER_SAVE_DIR"/{media_,}attic/ -type f -not -name _dummy -mtime +"${retention_days}" -delete
  # Remove empty directories
  find "$DOKU_DOCKER_SAVE_DIR"/{attic,cache,index,locks,media,media_attic,media_meta,meta,pages,tmp}/ \
        -mindepth 1 -type d -empty -delete

  # Secondary
  echo "DELETE FROM CACHE_LOG WHERE TIMESTAMP > datetime('now', '-5 days');" | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo-secondary.sqlite3
  echo "DELETE FROM CACHE_LOG WHERE datetime('now', '-5 days') > timestamp;" | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo-secondary.sqlite3
  echo "DELETE FROM REDIRECTIONS_LOG WHERE datetime('now', '-1 days') > timestamp;" | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo-secondary.sqlite3
  echo 'VACUUM;' | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo-secondary.sqlite3 # get space back

  # Primary
  echo "DELETE FROM REDIRECTIONS_LOG" | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo.sqlite3
  echo 'VACUUM;' | sqlite3 "$DOKU_DOCKER_SAVE_DIR"/meta/combo.sqlite3 # get space back
  du -sh  "$DOKU_DOCKER_SAVE_DIR"/meta/combo.sqlite3




}

# Example for a big wiki
# 53M     ./pages
# 285M    ./media
# 2.2G    ./meta
# 5.4M    ./media_meta
# 821M    ./attic
# 15M     ./index
# 1004K   ./locks
# 26M     ./media_attic
# 960K    ./tmp
# 33G     ./cache
# 1.5M    ./log
# 36G     .

dd_data_size(){
  # Size of the sub-directory
  du -h --max-depth=1 "$DOKU_DOCKER_SAVE_DIR"
  # For the directory
  # du -sh .
  # Top 20 files
  # find "$DOKU_DOCKER_SAVE_DIR" -type f -exec du -h {} + | sort -rh | head -n 20
  # find . -type f -exec du -h {} + | sort -rh | head -n 20
}
